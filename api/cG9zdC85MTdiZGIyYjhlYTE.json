{"title":"Git 从 0 到 1","date":"2022-02-14T02:13:54.000Z","date_formatted":{"ll":"Feb 14, 2022","L":"02/14/2022","MM-DD":"02-14"},"link":"post/917bdb2b8ea1","comments":true,"tags":["Git"],"categories":["env"],"updated":"2024-03-11T03:21:43.669Z","content":"<h1 id=\"介绍\">介绍<a title=\"#介绍\" href=\"#介绍\"></a></h1>\n<p>Git (/ɡɪt/) 是一个分布式版本控制软件，于 2005 年以 GPL 协议发布，最初的目的是为了更好管理 Linux 内核开发而设计</p>\n<p>参考：<a href=\"https://en.wikipedia.org/wiki/Git\" target=\"_blank\">Git - Wikipedia</a></p>\n<h2 id=\"特点\">特点<a title=\"#特点\" href=\"#特点\"></a></h2>\n<ol>\n<li>版本控制：Git 允许开发团队追踪和管理项目代码的版本。每次代码更改都会被记录，并且可以轻松地回滚到之前的版本</li>\n<li>分布式：Git是一种分布式版本控制系统，每个开发者都有完整的代码仓库副本，可以在没有网络连接的情况下工作，并在需要时将更改推送到共享的中央仓库</li>\n<li>分支管理：Git鼓励使用分支来组织工作流程。你可以创建、合并和删除分支，从而允许并行开发和独立的特性开发</li>\n<li>快速和高效：Git是一个快速和高效的版本控制系统。大多数操作都在本地执行，因此速度很快</li>\n<li>合作协作：多人协作开发时，Git使得代码的合并和冲突解决变得更容易</li>\n<li>开源和免费：Git是一个开源免费的版本控制系统，可以免费使用，并且有广泛的社区支持</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/jiechen257/gallery@main/img/202307282123654.png\" alt=\"image-20210707193910645\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"使用\">使用<a title=\"#使用\" href=\"#使用\"></a></h1>\n<p>Git 工具最常用的命令包括：</p>\n<ul>\n<li><code>git init</code>：在项目目录中初始化一个新的Git仓库</li>\n<li><code>git clone</code>：从远程仓库克隆一个副本到本地</li>\n<li><code>git add</code>：将更改添加到暂存区</li>\n<li><code>git commit</code>：将暂存区的更改提交到本地仓库</li>\n<li><code>git push</code>：将本地仓库的更改推送到远程仓库</li>\n<li><code>git pull</code>：从远程仓库拉取并合并更改到本地仓库</li>\n<li><code>git branch</code>：管理分支，创建、查看和删除分支</li>\n<li><code>git merge</code>：合并分支</li>\n<li><code>git status</code>：查看仓库状态，显示已修改、已暂存等信息</li>\n<li><code>git log</code>：查看提交历史记录</li>\n</ul>\n<blockquote>\n<p>建议根据 <strong>场景</strong> 来学习使用，以下是几种常见场景</p>\n</blockquote>\n<h2 id=\"新建项目上传-github\">新建项目上传 GitHub<a title=\"#新建项目上传-github\" href=\"#新建项目上传-github\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init // 本地目录会出现 .git 文件夹，用以存储 git 环境操作</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看本地用户,确认 git 环境存在</span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br><span class=\"line\"></span><br><span class=\"line\">// 链接 GitHub 仓库源</span><br><span class=\"line\">git remote add origin &quot;your repository url&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看本地源</span><br><span class=\"line\">git remote config -v</span><br><span class=\"line\"></span><br><span class=\"line\">对文件进行增删改</span><br><span class=\"line\"></span><br><span class=\"line\">// 将文件转入暂存区</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">// 转入版本库</span><br><span class=\"line\">git commit -m &quot;commit msg&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 推送版本到远程</span><br><span class=\"line\">git push --set-upstream-to origin [branch-name] // 第一次推送需要明确推送的远程分支是哪个</span><br><span class=\"line\">// 简写版本 git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\">查看 GitHub 仓库改动情况</span><br></pre></td></tr></table></figure>\n<h2 id=\"在同一分支协作开发\">在同一分支协作开发<a title=\"#在同一分支协作开发\" href=\"#在同一分支协作开发\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 缓存本地更改，不加 msg 则直接置入栈顶</span><br><span class=\"line\">git stash [--save [save-message]]</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">// 将栈顶缓存 pop 或者应用相应的 stash</span><br><span class=\"line\">git stash pop 或者 git stash apply [stash index]</span><br><span class=\"line\"></span><br><span class=\"line\">解决冲突</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;merge(xxx): xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到问题需要回退分支\">遇到问题需要回退分支<a title=\"#遇到问题需要回退分支\" href=\"#遇到问题需要回退分支\"></a></h2>\n<p>回到某个版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定位回退版本，查看 commit-hash</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\"></span><br><span class=\"line\">// 回退选项有 soft、mixed、hard 几种，推荐 soft 保留更改</span><br><span class=\"line\">git reset [commit-hash] --soft</span><br></pre></td></tr></table></figure>\n<p>撤销某次提交则使用 <code>git revert [commit-hash]</code></p>\n<h1 id=\"扩展\">扩展<a title=\"#扩展\" href=\"#扩展\"></a></h1>\n<h2 id=\"msg-规范\">msg 规范<a title=\"#msg-规范\" href=\"#msg-规范\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 提交信息的格式通常采用如下形式：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">- `&lt;type&gt;`：表示提交的类型，比如&quot;feat&quot;（新功能）、&quot;fix&quot;（修复bug）、&quot;docs&quot;（文档更新）等。</span><br><span class=\"line\">- `&lt;scope&gt;`：表示本次提交的影响范围，可以是模块名、文件名等。</span><br><span class=\"line\">- `&lt;subject&gt;`：简要描述本次提交的主题。</span><br><span class=\"line\">- `&lt;body&gt;`：详细描述本次提交的正文内容（可选）。</span><br><span class=\"line\">- `&lt;footer&gt;`：脚注信息，包含一些附加信息（可选）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>feat：新功能 feature</li>\n<li>bug：测试反馈 bug 列表中的 bug 号</li>\n<li>fix： 修复 bug</li>\n<li>ui：更新UI；</li>\n<li>docs： 文档注释变更</li>\n<li>style： 代码格式(不影响代码运行的变动)；</li>\n<li>refactor： 重构、优化(既不增加新功能，也不是修复bug)；</li>\n<li>perf： 性能优化;</li>\n<li>release：发布；</li>\n<li>deploy：部署；</li>\n<li>test： 增加测试</li>\n<li>chore： 构建过程或辅助工具的变动</li>\n<li>revert： 回退</li>\n<li>build： 打包</li>\n</ul>\n<h2 id=\"其他操作\">其他操作<a title=\"#其他操作\" href=\"#其他操作\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置全局 git 用户</span><br><span class=\"line\">git config --global user.name &quot;username&quot;</span><br><span class=\"line\">git config --global user.email &quot;email&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 验证连接，常用于判断 ssh 连接是否被墙</span><br><span class=\"line\">git -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\">// git使用远程分支</span><br><span class=\"line\">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 用来丢弃工作区修改，回退到上一次commit</span><br><span class=\"line\">git checkout -- &lt;file&gt;</span><br><span class=\"line\">git checkout .  // 注意有“.” 舍弃工作区当前全部改动</span><br><span class=\"line\"></span><br><span class=\"line\">// 将文件从缓存区取出，不设置file则默认全部取出</span><br><span class=\"line\">git reset HEAD &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 不删除工作区的改动，撤销commit，将内容存放在暂存区（add 之后）</span><br><span class=\"line\">git reset --soft HEAD^</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除 untracked 的文件和目录</span><br><span class=\"line\">git clean -fd</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除已经在暂存区的文件</span><br><span class=\"line\">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"多邮箱管理\">多邮箱管理<a title=\"#多邮箱管理\" href=\"#多邮箱管理\"></a></h2>\n<p>参考：<a href=\"https://juejin.cn/post/7135362569895673893\" target=\"_blank\">如何给某一类项目统一设置用户名和邮箱</a></p>\n<p>修改 git 的全局配置文件，一般是用户主目录下的 <code>.gitconfig</code> 文件</p>\n<p>打开文件添加如下配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[includeIf &quot;gitdir:/Users/lee/ent/code/&quot;]</span></span><br><span class=\"line\">  <span class=\"attr\">path</span> = .entconfig</span><br></pre></td></tr></table></figure>\n<p>这段配置表示的是所有存放在 <code>/Users/lee/ent/code/</code> 的仓库将会使用 <code>.entconfig</code> 这个文件里的配置</p>\n<p>那么就新建 <code>.entconfig</code> 文件来配置用户名邮箱，甚至其它的一些 git 配置都是可以的，示例如下</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[user]</span></span><br><span class=\"line\">  <span class=\"attr\">name</span> = entname</span><br><span class=\"line\">  <span class=\"attr\">email</span> = name@ent.cn</span><br></pre></td></tr></table></figure>\n<p>这样就完成了相应的配置，只需要将代码仓库放在指定目录下就可以了</p>\n<h2 id=\"图形化工具\">图形化工具<a title=\"#图形化工具\" href=\"#图形化工具\"></a></h2>\n<p>插件：</p>\n<ul>\n<li>vscode —— GitLens 插件</li>\n<li>Jetbrains 系产品 —— GitBox</li>\n</ul>\n<p>软件：</p>\n<ul>\n<li>SourceTree <img src=\"https://cdn.jsdelivr.net/gh/jiechen257/gallery@main/img/202307282128620.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n<h1 id=\"进阶\">进阶<a title=\"#进阶\" href=\"#进阶\"></a></h1>\n<h2 id=\"git-rebase-和-git-merge\">git rebase 和 git merge<a title=\"#git-rebase-和-git-merge\" href=\"#git-rebase-和-git-merge\"></a></h2>\n<h3 id=\"优缺点\">优缺点<a title=\"#优缺点\" href=\"#优缺点\"></a></h3>\n<ul>\n<li>git merge\n<ul>\n<li>优点：不会破坏原分支的提交记录。</li>\n<li>缺点：会产生额外的提交记录，并进行两条分支线的合并。</li>\n</ul>\n</li>\n<li>git rebase\n<ul>\n<li>优点：无需新增提交记录到目标分支，reabse后可以直接将对象分支的提交历史加到目标分支上，形成线性提交历史记录，更加直观。</li>\n<li>缺点：不能在一个共享分支上进行reabse操作，会带来分支安全问题</li>\n</ul>\n</li>\n</ul>\n<p>git merge<br>\n<img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43fa962402d6494c936d53f0e545ccd4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?\" alt=\"\" loading=\"lazy\"></p>\n<p>git rebase（git rebase --continue）<br>\n<img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa84b664cc1c4b63971c479fad8c1355~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"正确使用\">正确使用<a title=\"#正确使用\" href=\"#正确使用\"></a></h3>\n<ul>\n<li>合代码到公共分支的时候使用<strong>git merge</strong>，书写正确规范的<strong>merge commits</strong>留下记录。</li>\n<li>合代码到个人分支的时候使用<strong>git rebase</strong>，可以不污染分支的历史提交记录，形成简介的线性记录</li>\n</ul>\n<h3 id=\"rebase后的push问题\">rebase后的push问题<a title=\"#rebase后的push问题\" href=\"#rebase后的push问题\"></a></h3>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b33ccb8ab10d468f847f7caad2a5900b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>push命令假设你的本地分支和远端分支的唯一区别是你本地有几个新的commit，而远端没有</p>\n</blockquote>\n<p>但是由于进行了rebase操作，现在本地的<strong>feat-a分支</strong>多了一个之前从没见过的commit，这种情况下是不能进行fast-forwad模式的合并操作的，所以当执行 <code>git push origin feat-a</code> 命令时会报错误。</p>\n<p>要解决这个问题必须确保当前<code>feat-a</code>分支只有你自己在开发，没有其他成员的操作，如果符合这一条件，那么可以直接进行强制推送，执行命令： <code>git push --force origin feat-a</code></p>\n<h2 id=\"git-switch和git-restore\">git switch和git restore<a title=\"#git-switch和git-restore\" href=\"#git-switch和git-restore\"></a></h2>\n<p>不同于gitcheckout切换commit直接提供commithash，使用switch切换commit时需要加-d标志<br>\n<code>git switch -d f8c540805b7e16753c65619ca3d7514178353f39</code></p>\n<p>同时切换并新增一个本地分支时需要加-c标志<br>\n<code>git checkout -b new_branch</code><br>\n<code>git switch -c new_branch</code></p>\n<p>可以将文件的状态恢复到指定的git版本(默认为当前分支)</p>\n<p><code>git restore --test.txt</code></p>\n<h2 id=\"git-revert和git-reset\">git revert和git reset<a title=\"#git-revert和git-reset\" href=\"#git-revert和git-reset\"></a></h2>\n<p><code>git revert</code> 是撤销某次操作，此次操作之前或之后的commit都会被保留<br>\n<code>git reset</code> 是撤销某次提交，此次之后的修改都会被退回到暂存区</p>\n<ul>\n<li>reset是彻底回退到指定的commit版本，该commit后的所有commit都将被清除，包括提交历史记录；</li>\n<li>revert仅仅是撤销指定commit的修改，并不影响后续的commit，但所撤销的commit被后续的commit修改了同一地方则会产生冲突；</li>\n<li>reset执行后不会产生记录，revert执行后会产生记录；</li>\n<li>reset执行后无法再次恢复，revert执行后因为不会清除记录，并且会产生新纪录，所以文件不会丢失，你可以多次执行revert恢复到某次改变之前的状态；</li>\n<li>reset执行后HEAD会后移，而revert的HEAD则一直是向前的；</li>\n</ul>\n<p>详情参考：<a href=\"https://juejin.cn/post/7021320176998023182\" target=\"_blank\">一文彻底搞清git reset和revert区别 - 掘金</a></p>\n<h3 id=\"reset---hard和reset---soft\">reset --hard和reset --soft<a title=\"#reset---hard和reset---soft\" href=\"#reset---hard和reset---soft\"></a></h3>\n<p>一般我们在使用 reset 命令时，<code>git reset --hard</code> 会被提及的比较多，它能让 commit 记录强制回溯到某一个节点。而 <code>git reset --soft</code> 的作用正如其名，<code>--soft</code> (柔软的) 除了回溯节点外，还会保留节点的修改内容。</p>\n<h2 id=\"git-tag\">git tag<a title=\"#git-tag\" href=\"#git-tag\"></a></h2>\n<p>打标签的作用，就是给项目的开发节点，加上语义化的名字，也即功能版本的别名。 打上标签名的同时，写上附带信息，可以方便项目日后维护过程中的回溯和复查<br>\n另外，也可以通过标签记录，大致了解当前项目的向下兼容性、API的修改和迭代情况</p>\n<h3 id=\"打标签\">打标签<a title=\"#打标签\" href=\"#打标签\"></a></h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 命令格式</span><br><span class=\"line\">git tag -a 标签名 -m &quot;附注信息&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例</span><br><span class=\"line\">git tag -a v0.1.0 -m &quot;完成了文章a和文章b的撰写，耗费时间2h，感觉棒棒的！&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为某个commit后的版本打tag</span><br><span class=\"line\">git tag -a &lt;标签名&gt; &lt;commitId&gt; -m &#x27;标签内容文字描述&#x27; </span><br></pre></td></tr></table></figure>\n<h3 id=\"版本基本控制规范\">版本基本控制规范<a title=\"#版本基本控制规范\" href=\"#版本基本控制规范\"></a></h3>\n<p>版本号基本的规范是Major.Minor.Patch，也就是Major 是主版本号、Minor是次版本号、而 Patch 为修订号。每个元素必须以数值来递增。<br>\n例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。只有三个号</p>\n<p>详情查看：<a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\">语义化版本 2.0.0 | Semantic Versioning</a></p>\n<h2 id=\"git-wotktree\">git wotktree<a title=\"#git-wotktree\" href=\"#git-wotktree\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加工作树（工作区）</span></span><br><span class=\"line\">git worktree add [&lt;options&gt;] &lt;path&gt; [&lt;commit-ish&gt;]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看工作树列表</span></span><br><span class=\"line\">git worktree list [&lt;options&gt;]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">锁定工作区（防止移动或删除）</span></span><br><span class=\"line\">git worktree lock [&lt;options&gt;] &lt;path&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移动工作区</span></span><br><span class=\"line\">git worktree move &lt;worktree&gt; &lt;new-path&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清空被删除的工作区信息</span></span><br><span class=\"line\">git worktree prune [&lt;options&gt;]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除工作区</span></span><br><span class=\"line\">git worktree remove [&lt;options&gt;] &lt;worktree&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修复工作区（例：当主工作区移动，副工作区无法连接等情况）</span></span><br><span class=\"line\">git worktree repair [&lt;path&gt;...]</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解锁工作区（对应lock锁定工作区）</span></span><br><span class=\"line\">git worktree unlock &lt;path&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-flow\">git flow<a title=\"#git-flow\" href=\"#git-flow\"></a></h2>\n<p>版本规范其实有许多种工作流形式，<strong>有 Git flow，有集中式工作流，有功能分支工作流</strong>；</p>\n<blockquote>\n<p>Git Flow是构建在Git之上的一个组织软件开发活动的模型，是在Git之上构建的一项软件开发最佳实践</p>\n</blockquote>\n<p><img src=\"http://cdn.becase.top/20221201165915.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>主分支：master、develop<br>\n辅助分支：feature、release、hotfix</p>\n<h2 id=\".gitignore不生效\">.gitignore不生效<a title=\"#.gitignore不生效\" href=\"#.gitignore不生效\"></a></h2>\n<p>.gitignore 只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。<br>\n <br>\n 那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached .</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &#x27;update .gitignore&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改已经提交的commit-msg\">修改已经提交的commit msg<a title=\"#修改已经提交的commit-msg\" href=\"#修改已经提交的commit-msg\"></a></h2>\n<p>参考：<a href=\"https://www.cnblogs.com/FengZeng666/p/15394612.html\" target=\"_blank\">git 修改 Commit Message - 拾月凄辰 - 博客园</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --oneline</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase -i [父级commit-id]</span><br><span class=\"line\"></span><br><span class=\"line\">选择r模式进行替换，然后进入对应窗口修改msg</span><br><span class=\"line\"></span><br><span class=\"line\">:wq保存退出</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h1>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Git\" target=\"_blank\">Git - Wikipedia</a></li>\n<li><a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\">A successful Git branching model » nvie.com</a></li>\n<li><a href=\"https://juejin.cn/post/6844903518751424525\" target=\"_blank\">如何利用 Git 中的 tag 管理项目版本号 </a></li>\n<li><a href=\"https://juejin.cn/post/7047529253428002830\" target=\"_blank\">Git、GitHub、GitLab Flow，傻傻分不清？一图看懂各种分支管理模型</a></li>\n</ul>\n","prev":{"title":"vue转react快速上手","link":"post/89193b3a1f93"},"next":{"title":"Redis 快速上手","link":"post/eabb6094f334"},"plink":"https://becase.top/post/917bdb2b8ea1/","toc":[{"id":"介绍","title":"介绍","index":"1","children":[{"id":"特点","title":"特点","index":"1.1"}]},{"id":"使用","title":"使用","index":"2","children":[{"id":"新建项目上传-github","title":"新建项目上传 GitHub","index":"2.1"},{"id":"在同一分支协作开发","title":"在同一分支协作开发","index":"2.2"},{"id":"遇到问题需要回退分支","title":"遇到问题需要回退分支","index":"2.3"}]},{"id":"扩展","title":"扩展","index":"3","children":[{"id":"msg-规范","title":"msg 规范","index":"3.1"},{"id":"其他操作","title":"其他操作","index":"3.2"},{"id":"多邮箱管理","title":"多邮箱管理","index":"3.3"},{"id":"图形化工具","title":"图形化工具","index":"3.4"}]},{"id":"进阶","title":"进阶","index":"4","children":[{"id":"git-rebase-和-git-merge","title":"git rebase 和 git merge","index":"4.1","children":[{"id":"优缺点","title":"优缺点","index":"4.1.1"},{"id":"正确使用","title":"正确使用","index":"4.1.2"},{"id":"rebase后的push问题","title":"rebase后的push问题","index":"4.1.3"}]},{"id":"git-switch和git-restore","title":"git switch和git restore","index":"4.2"},{"id":"git-revert和git-reset","title":"git revert和git reset","index":"4.3","children":[{"id":"reset---hard和reset---soft","title":"reset --hard和reset --soft","index":"4.3.1"}]},{"id":"git-tag","title":"git tag","index":"4.4","children":[{"id":"打标签","title":"打标签","index":"4.4.1"},{"id":"版本基本控制规范","title":"版本基本控制规范","index":"4.4.2"}]},{"id":"git-wotktree","title":"git wotktree","index":"4.5"},{"id":"git-flow","title":"git flow","index":"4.6"},{"id":".gitignore不生效","title":".gitignore不生效","index":"4.7"},{"id":"修改已经提交的commit-msg","title":"修改已经提交的commit msg","index":"4.8"}]},{"id":"参考","title":"参考","index":"5"}],"reading_time":"3043 words in 20 min"}
{"title":"为何不推荐 Sass 作为 css 预处理","date":"2023-07-04T12:47:50.000Z","date_formatted":{"ll":"Jul 4, 2023","L":"07/04/2023","MM-DD":"07-04"},"link":"post/d1db0227e2c5","comments":true,"tags":["sass"],"categories":["front-end"],"updated":"2024-03-11T03:21:43.677Z","content":"<h2 id=\"背景\">背景<a title=\"#背景\" href=\"#背景\"></a></h2>\n<p>我 <code>npm install</code> 又双叒叕遇到 <code>sass</code> 报错了！！！</p>\n<p>痛心疾首，下定决心写一个 <code>sass</code> 避坑指南 :)</p>\n<blockquote>\n<p><a href=\"https://sass-lang.com/guide\" target=\"_blank\">Sass</a> 是成熟、稳定、强大的专业级 CSS 扩展语言。它兼容 CSS、功能丰富、社区庞大，为业界认可，被广泛应用</p>\n</blockquote>\n<p>本文将根据使用 Sass 存在的痛点，以及更好的替代品，来陈述个人观点：<strong>不推荐使用 scss 作为 css 预处理器</strong>，更倾向于使用 <a href=\"http://lesscss.org/\" target=\"_blank\">Less</a> 或 <a href=\"https://stylus.bootcss.com/\" target=\"_blank\">Stylus</a></p>\n<h2 id=\"sass-vs-scss\">Sass Vs Scss<a title=\"#sass-vs-scss\" href=\"#sass-vs-scss\"></a></h2>\n<p>Sass 有两种语法：</p>\n<ul>\n<li>第一个被称为 SCSS（Sassy CSS），在本参考文献中一直使用，它是 CSS 语法的扩展。这意味着每个有效的 CSS 样式表，都是具有相同含义的有效 SCSS 文件，两者完全兼容。下文描述的 Sass 功能增强了此语法。使用此语法的文件扩展名为 <strong>.scss</strong>。</li>\n<li>第二种或<strong>更旧的语法</strong>称为缩进语法（有时也称为“ Sass”），提供了一种更为简洁的 CSS 编写方式。它使用缩进而不是方括号来表示选择器的嵌套，并使用换行符而不是分号来分隔属性。使用此语法的<strong>文件</strong>扩展名为 <strong>.sass</strong></li>\n</ul>\n<p>以上出自 <a href=\"https://sass-lang.com/documentation/syntax\" target=\"_blank\">Sass 官网对两者的解释</a>。因为 scss 完全兼容 css，目前一般常用的是 scss；但 scss 也是 Sass 语法一部分，因此就以此为标题；言下之意，无论是 <code>.scss</code> 还是 <code>.sass</code> 皆不推荐使用。</p>\n<h2 id=\"不推荐使用的理由\">不推荐使用的理由<a title=\"#不推荐使用的理由\" href=\"#不推荐使用的理由\"></a></h2>\n<p>Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言，如果安装并<code>单独使用</code> sass，这并无什么问题；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 sass</span></span><br><span class=\"line\">npm install -g sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 sass</span></span><br><span class=\"line\">sass <span class=\"built_in\">source</span>/stylesheets/index.scss build/stylesheets/index.css</span><br></pre></td></tr></table></figure>\n<p>但在工程化项目中，就另当别论了；，需要借助 <a href=\"https://github.com/sass/node-sass\" target=\"_blank\">node-sass</a>。它虽然能够以惊人的速度，通过连接中间件自动将 <code>.scss</code> 文件本地编译为 <code>css</code>，但同时存在很多问题，导致在有的时候引发巨大痛点，这便是“不推荐使用 Sass 作为 css 预处理器”主要理由。</p>\n<blockquote>\n<p>Node-sass is a library that provides binding for Node.js to <a href=\"https://github.com/sass/libsass\" target=\"_blank\">LibSass</a>, the C version of the popular stylesheet preprocessor, Sass.</p>\n</blockquote>\n<h3 id=\"node-sass-存在的痛点\">node-sass 存在的痛点<a title=\"#node-sass-存在的痛点\" href=\"#node-sass-存在的痛点\"></a></h3>\n<ul>\n<li><strong>node 版本与 node-sass 版本不兼容</strong></li>\n</ul>\n<p>node-sass 与 Node.js 版本相关联；这就导致，一旦本地 Node.js 升级，就会出现 node-sass 无法工作的情况，如下报错：</p>\n<blockquote>\n<p>Module build failed: ModuleBuildError: Module build failed: Error: Node Sass does not yet support your current environment:<br>\nThis usually happens because your environment has changed since running npm install. Run npm rebuild node-sass to build the binding for your current environment.</p>\n</blockquote>\n<blockquote>\n<p>Module build failed (from ./node_modules/sass-loader/index.js):Error: Missing binding /…/xxx/node_modules/node-sass/vendor/darwin-x64-64/binding.node<br>\nNode Sass could not find a binding for your current environment: OS X 64-bit with Node.js 10.x</p>\n</blockquote>\n<p>通常遇见类似问题，你就需要通过 rebuild 或重新安装 node-sass 来解决，徒增烦恼；当然，也可以借助 <code>nvm</code> 来切换至 node-sass 对应 Node.js 版本；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rebuild node-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Or</span></span><br><span class=\"line\">npm uninstall node-sass</span><br><span class=\"line\">npm install node-sass</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Or</span></span><br><span class=\"line\">nvm use [node-sass 对用的 Node 版本]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>需要 node-gyp 作为先决条件</strong></li>\n</ul>\n<p><code>node-sass</code> 需要 node-gyp 作为先决条件，而 <code>node-gyp</code> 又需要您安装了兼容版本的 Python，啧啧，这真是，不出问题还好；出现就得好一番折腾（而且其报错并不是很友好，就需要定位排查、查阅各种资料来修复）。</p>\n<blockquote>\n<p><code>node-gyp</code> requires that you have installed a compatible version of Python, one of: v2.7, v3.5, v3.6, v3.7, or v3.8. If you have multiple Python versions installed …</p>\n</blockquote>\n<p>先前因为需要，在 Mac 上，需要将 Python2 升级至 Python3，之后就导致各种 <code>node-sass</code> 问题，好一番折腾才修复。</p>\n<blockquote>\n<p>gyp verb check python checking for Python executable “python” in the PATH<br>\ngyp verb <code>which</code> succeeded python /usr/local/bin/python<br>\ngyp ERR! configure error<br>\ngyp ERR! stack Error: Command failed: /usr/local/bin/python -c import sys; print “%s.%s.%s” % sys.version_info[:3];<br>\ngyp ERR! stack File “”, line 1<br>\ngyp ERR! stack import sys; print “%s.%s.%s” % sys.version_info[:3];<br>\ngyp ERR! stack ^<br>\ngyp ERR! stack SyntaxError: invalid syntax</p>\n</blockquote>\n<blockquote>\n<p>/Users/xxx/.node-gyp/12.13.0/include/node/v8.h:3039:5: note: candidate constructor not<br>\nviable: requires 2 arguments, but 1 was provided<br>\nUtf8Value(Isolate* isolate, Local<a href=\"v8::Value\">v8::Value</a> obj);&gt;</p>\n</blockquote>\n<ul>\n<li><strong>binding.node 源无法访问或速度慢</strong></li>\n</ul>\n<p>实际上 node-sass 依赖了一个二进制文件 binding.node，从 npm 源安装完本体后还会从 github（默认源） 下载 binding.node；这就导致默认情况下，下载 node-sass 依赖很迟缓。</p>\n<p>以上，SASS 不仅需要额外安装 node-sass （很慢），而且跟本地开发环境（Node.js，Python）高度挂钩，容易出现各种诡异问题，故而不推荐使用；而且，SASS 所提供的常用功能，Less、Stylus 也同样具备；而且 Less、Stylus 易于安装，使用便捷，何乐不为？</p>\n<h2 id=\"推荐使用 less或 stylus 或 dart-sass\">推荐使用 <a href=\"http://lesscss.org\">Less</a>或 <a href=\"www.stylus.com\">Stylus</a> 或 <a href=\"https://github.com/sass/dart-sass\">dart-sass</a><a title=\"#推荐使用 less或 stylus 或 dart-sass\" href=\"#推荐使用 less或 stylus 或 dart-sass\"></a></h2>\n<ul>\n<li><a href=\"http://lesscss.org/\" target=\"_blank\">Less</a>：Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。Less 可以运行在 Node 或浏览器端</li>\n<li><a href=\"https://stylus.bootcss.com/\" target=\"_blank\">Stylus</a>：Stylus 是一种创新的样式表语言，可编译为 CSS。受 SASS 的启发，Stylus 是用 node.js 构建的，并能够在本交互式教程中说明的浏览器中运行</li>\n</ul>\n<h2 id=\"转载\">转载<a title=\"#转载\" href=\"#转载\"></a></h2>\n<ul>\n<li><a href=\"https://quickapp.lovejade.cn/why-sass-is-not-recommended-as-a-css-preprocessor/\" target=\"_blank\">为何不推荐使用 Sass 作为 css 预处理器</a></li>\n</ul>\n","prev":{"title":"ClashX的增强模式","link":"post/53d5067bc396"},"next":{"title":"新兴的Astro","link":"post/fbd252aeca35"},"plink":"https://becase.top/post/d1db0227e2c5/","toc":[{"id":"背景","title":"背景","index":"1"},{"id":"sass-vs-scss","title":"Sass Vs Scss","index":"2"},{"id":"不推荐使用的理由","title":"不推荐使用的理由","index":"3","children":[{"id":"node-sass-存在的痛点","title":"node-sass 存在的痛点","index":"3.1"}]},{"id":"推荐使用 less或 stylus 或 dart-sass","title":"推荐使用 Less或 Stylus 或 dart-sass","index":"4"},{"id":"转载","title":"转载","index":"5"}],"reading_time":"1302 words in 9 min"}